package augmentation;

import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;

import org.deckfour.xes.factory.XFactory;
import org.deckfour.xes.factory.XFactoryBufferedImpl;
import org.deckfour.xes.model.XLog;

import parser.Parser;
import util.Serializer;

public class Augmentation {
	
	public Augmentation() {
		
	}
	
	public XLog augmentProcessLog(int augmentationFactor, Map<Augmentor, Double> augmentors, XLog processLog, String path, String title) {
		Parser p = new Parser();
		Serializer s = new Serializer();
		if(checkWeights(augmentors) == true) {
			XFactory factory = new XFactoryBufferedImpl();
			XLog augmentedLog = factory.createLog();
						
			//Calculates the number of traces that should be generated by each augmentor
			int numberOfSyntheticTraces = (augmentationFactor*processLog.size());
			System.out.println(numberOfSyntheticTraces);
			
			//Apply different augmentors
			for(Augmentor a : augmentors.keySet()) {
				int tracesToGenerate = (int) (augmentors.get(a)*numberOfSyntheticTraces);
				System.out.println(tracesToGenerate);
				if(a instanceof TimeSeriesAugmentor) {
					TimeSeriesAugmentor timeSeriesAugmentor = (TimeSeriesAugmentor) a;
					
					while(tracesToGenerate > 0) {
						long timeStep = ThreadLocalRandom.current().nextLong(p.getMinimalDuration(processLog), p.getMaximalDuration(processLog));
						Collections.shuffle(processLog);
						augmentedLog.add(timeSeriesAugmentor.shiftTrace(processLog.get(0), timeStep));
						tracesToGenerate--;
						if(tracesToGenerate != 0) {
							double factor = 2*Math.random();
							Collections.shuffle(processLog);
							augmentedLog.add(timeSeriesAugmentor.stretchTrace(processLog.get(0), factor));
						}
						else {
							break;
						}
					}
				}
				
				/* TO DO: Not supported right now
				if(a instanceof BayesAugmentor) {
					BayesAugmentor bayesAugmentor = (BayesAugmentor) a;
					
					while(tracesToGenerate > 0) {
					}
				}
				//Has right now an negative effect...
				if(a instanceof GenericAugmentor) {
					GenericAugmentor genericAugmentor = (GenericAugmentor) a;
					
					while(tracesToGenerate > 0) {
					}
				}
				*/
				
				if(a instanceof FragmentAugmentor) {
					FragmentAugmentor fragmentAugmentor = (FragmentAugmentor) a;
					
					while(tracesToGenerate > 0) {
						tracesToGenerate--;
						Collections.shuffle(processLog);
						augmentedLog.add(fragmentAugmentor.createFragmentFromStartKeepEnd(processLog.get(0)));
					}

				}
				
				
				if(a instanceof NoiseAugmentor) {
					NoiseAugmentor noiseAugmentor = (NoiseAugmentor) a;
					
					while(tracesToGenerate > 0) {
						tracesToGenerate--;
						Collections.shuffle(processLog);
						augmentedLog.add(noiseAugmentor.doubleEvent(processLog.get(0)));
						if(tracesToGenerate >= 1) {
							tracesToGenerate--;
							Collections.shuffle(processLog);
							augmentedLog.add(noiseAugmentor.swapping(processLog.get(0)));
						}
					}
				}
			}
				
			//Add to original log and serialize log
			s.serializeLog(augmentedLog, path, title);
			return augmentedLog;
		}
		else {
			System.err.println("Fehler: Die Gewichtung der einzelnen Augmentoren muss in Summe 1 ergeben!");
			return null;
		}
		
	}
	
	private boolean checkWeights(Map<Augmentor, Double> augmentors) {
		double sum = 0;
		for(Augmentor a : augmentors.keySet()) {
			sum = sum + augmentors.get(a);
		}
		
		if(sum == 1) {
			return true;
		}
		else {
			return false;
		}
	}
}
